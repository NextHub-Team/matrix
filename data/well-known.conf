events {
  worker_connections 1024;
}

http {
  server {
    listen 443 ssl;
    server_name matrix.next-hub.app:8088;

    # SSL certificate paths
    ssl_certificate /etc/ssl/certs/live/matrix.next-hub.app/fullchain.pem;
    ssl_certificate_key /etc/ssl/certs/live/matrix.next-hub.app/privkey.pem;

    # /.well-known/matrix/server endpoint for federation discovery
    location /.well-known/matrix/server {
      default_type application/json;
      add_header Access-Control-Allow-Origin *;
      return 200 '{"m.server": "matrix.next-hub.app:8448"}';
    }

    # /.well-known/matrix/client endpoint for client configuration
    location /.well-known/matrix/client {
      default_type application/json;
      add_header Access-Control-Allow-Origin *;
      return 200 '{"m.homeserver": {"base_url": "https://matrix.next-hub.app:8008"}}';
    }

# Health check for Synapse
location /healthcheck {
    proxy_pass http://matrix.next-hub.app:8088/_synapse/admin/v1/server_version;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Optimize timeouts
    proxy_connect_timeout 5s;
    proxy_send_timeout 10s;
    proxy_read_timeout 10s;

    # Enable keepalive connections
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Intercept errors and handle them differently
    proxy_intercept_errors on;

    # Handle failure responses
    error_page 400 401 403 404 500 502 503 504 = @healthcheck_fail;

    # Set response headers
    add_header Content-Type application/json;
    add_header Cache-Control no-store;

    # Simply proxy the response from the Synapse server
    # This will return the server version JSON if successful
}

# Fallback for failed health check
location @healthcheck_fail {
    internal;
    default_type application/json;
    return 503 '{"status": "error", "timestamp": "$time_iso8601", "message": "Synapse service unavailable"}';
}

# Fallback for failed health check
location @healthcheck_fail {
    internal;
    default_type application/json;
    return 503 '{"status": "error", "timestamp": "$time_iso8601", "message": "Synapse service unavailable"}';
}

# Fallback for failed health check
location @healthcheck_fail {
    internal;
    default_type application/json;
    return 503 '{"status": "error", "timestamp": "$time_iso8601", "message": "Synapse service unavailable"}';
}

# Fallback for failed health check
location @healthcheck_fail {
    internal;
    default_type application/json;
    return 503 '{"status": "error", "timestamp": "$time_iso8601", "message": "Synapse service unavailable"}';
}
    # /.well-known/matrix/support endpoint for support information
    location /.well-known/matrix/support {
      default_type application/json;
      add_header Access-Control-Allow-Origin *;
      return 200 '{
        "contacts": [
          {
            "email_address": "support@next-hub.app",
            "matrix_id": "@support:next-hub.app",
            "role": "m.role.admin"
          },
          {
            "email_address": "admin@next-hub.app",
            "matrix_id": "@admin:next-hub.app",
            "role": "m.role.admin"
          },
          {
            "email_address": "security@next-hub.app",
            "role": "m.role.security"
          }
        ],
        "support_page": "https://matrix.next-hub.app:8008/support.html"
      }';
    }

    # Proxy to Synapse for other traffic
    location / {
      proxy_pass http://matrix.next-hub.app:8088;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
